# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'tcu.ui'
#
# Created by: PyQt5 UI code generator 5.15.5
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys

from PyQt5 import QtCore, QtGui, QtWidgets  
from PyQt5.QtCore import *
from PyQt5.QtChart import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import QDialog, QApplication, QPushButton, QVBoxLayout
from PyQt5.QtQuick import QQuickView
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.backends.backend_qt5agg import NavigationToolbar2QT as NavigationToolbar
import matplotlib.pyplot as plt
import random
from dataclasses import dataclass, field


#general variables
@dataclass()
class gearO:
    state: str = ""
    O1: int = 0
    O2: int = 0
    O3: int = 0
    O4: int = 0
@dataclass()
class gearP:
    state: str = ""
    data_x: list[int] = field(default_factory=list)
    data_y: list[int] = field(default_factory=list) 
# [20,40,60,80,100 ]  [[1,1],[40,20],[80,40],[120,90],[200,100]]
gear_list = "Park"
P=gearO(state="P")
R=gearO(state="R")
N=gearO(state="N")
G1=gearO(state="G1")
G2=gearO(state="G2")
G3=gearO(state="G3")
G4=gearO(state="G4")
G5=gearO(state="G5")
G6=gearO(state="G6")
G7=gearO(state="G7")
G8=gearO(state="G8")
G9=gearO(state="G9")

GP1=gearP(state="G1",data_x=[20,40,60,80,100 ],data_y=[[1,0],[40,0],[80,0],[120,0],[200,0]])
GP2=gearP(state="G2",data_x=[20,40,60,80,100 ],data_y=[[1,1],[40,20],[80,40],[120,90],[200,100]])
GP3=gearP(state="G3",data_x=[20,40,60,80,100 ],data_y=[[1,1],[40,20],[80,40],[120,90],[200,100]])
GP4=gearP(state="G4",data_x=[20,40,60,80,100 ],data_y=[[1,1],[40,20],[80,40],[120,90],[200,100]])
GP5=gearP(state="G5",data_x=[20,40,60,80,100 ],data_y=[[1,1],[40,20],[80,40],[120,90],[200,100]])
GP6=gearP(state="G6",data_x=[20,40,60,80,100 ],data_y=[[1,1],[40,20],[80,40],[120,90],[200,100]])
GP7=gearP(state="G7",data_x=[20,40,60,80,100 ],data_y=[[1,1],[40,20],[80,40],[120,90],[200,100]])
GP8=gearP(state="G8",data_x=[20,40,60,80,100 ],data_y=[[1,1],[40,20],[80,40],[120,90],[200,100]])
GP9=gearP(state="G9",data_x=[20,40,60,80,100 ],data_y=[[1,1],[40,20],[80,40],[120,90],[200,100]])
print(G1.O1)
show = 0
# O1 = 0
# O2 = 0
# O3 = 0
# O4 = 0
class Ui_TCU(object):
    
    def setupUi(self, TCU):
        # super(Ui_TCU, self).__init__(TCU)
        global show
        TCU.setObjectName("TCU")
        TCU.resize(1000, 800)
        self.centralwidget = QtWidgets.QWidget(TCU)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(0, 0, 1000, 800))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tabWidget.sizePolicy().hasHeightForWidth())
        self.tabWidget.setSizePolicy(sizePolicy)
        self.tabWidget.setObjectName("tabWidget")
        self.Sensors = QtWidgets.QWidget()
        self.Sensors.setObjectName("Sensors")
        self.RPMgaugeView = QQuickView()
        self.RPMcontain = QtWidgets.QWidget.createWindowContainer(self.RPMgaugeView, self.Sensors)
        self.RPMcontain.setGeometry(QtCore.QRect(50, 50, 300, 300))
        self.RPMgaugeView.lower
        self.RPMcontain.lower
        self.RPMgaugeView.setSource(QUrl('RPM.qml'))
        self.RPMGauge=self.RPMgaugeView.findChild(QObject,'rpm_gauge')
        self.RPMGauge.setProperty('rpm_value',8300)

        self.TPSgaugeView = QQuickView()
        self.TPScontain = QtWidgets.QWidget.createWindowContainer(self.TPSgaugeView, self.Sensors)
        self.TPScontain.setGeometry(QtCore.QRect(350, 50, 300, 300))
        self.TPSgaugeView.setSource(QUrl('TPS.qml'))
        self.TPSGauge=self.TPSgaugeView.findChild(QObject,'tps_gauge')
        self.TPSGauge.setProperty('tps_value',72)
        self.tabWidget.addTab(self.Sensors, "")

        self.TFTgaugeView = QQuickView()
        self.TFTcontain = QtWidgets.QWidget.createWindowContainer(self.TFTgaugeView, self.Sensors)
        self.TFTcontain.setGeometry(QtCore.QRect(50, 350, 300, 300))
        self.TFTgaugeView.setSource(QUrl('TFT.qml'))
        self.TFTGauge=self.TFTgaugeView.findChild(QObject,'tft_gauge')
        self.TFTGauge.setProperty('tft_value',55)

        self.SPEEDgaugeView = QQuickView()
        self.SPEEDcontain = QtWidgets.QWidget.createWindowContainer(self.SPEEDgaugeView, self.Sensors)
        self.SPEEDcontain.setGeometry(QtCore.QRect(650, 50, 300, 300))
        self.SPEEDgaugeView.setSource(QUrl('SPEED.qml'))
        self.SPEEDGauge=self.SPEEDgaugeView.findChild(QObject,'speed_gauge')
        self.SPEEDGauge.setProperty('speed_value',55)

        self.LPgaugeView = QQuickView()
        self.LPcontain = QtWidgets.QWidget.createWindowContainer(self.LPgaugeView, self.Sensors)
        self.LPcontain.setGeometry(QtCore.QRect(350, 350, 300, 300))
        self.LPgaugeView.setSource(QUrl('TPS.qml'))
        self.LPGauge=self.LPgaugeView.findChild(QObject,'tps_gauge')
        self.LPGauge.setProperty('tps_value',72)
        self.tabWidget.addTab(self.Sensors, "")

        self.eng_spd = QtWidgets.QLabel(self.Sensors)
        self.eng_spd.setGeometry(QtCore.QRect(10, 12, 101, 31))
        self.eng_spd.raise_
        font = QtGui.QFont()
        font.setPointSize(12)
        self.eng_spd.setFont(font)
        self.eng_spd.setObjectName("eng_spd")
        self.eng_spd__ = QtWidgets.QLCDNumber(self.Sensors)
        self.eng_spd__.setGeometry(QtCore.QRect(10, 10, 64, 23))
        self.eng_spd__.raise_
        self.eng_spd__.setObjectName("eng_spd__")
        self.eng_spd_ = QtWidgets.QLabel(self.Sensors)
        self.eng_spd_.setGeometry(QtCore.QRect(175, 170, 71, 31))
        self.eng_spd_.raise_
 
        font = QtGui.QFont()
        font.setPointSize(12)
        self.eng_spd_.setFont(font)
        self.eng_spd_.setAlignment(QtCore.Qt.AlignCenter)
        self.eng_spd_.setObjectName("eng_spd_")
        self.tps = QtWidgets.QLabel(self.Sensors)
        self.tps.setGeometry(QtCore.QRect(290, 90, 71, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.tps.setFont(font)
        self.tps.setAlignment(QtCore.Qt.AlignCenter)
        self.tps.setObjectName("tps")
        self.tps_ = QtWidgets.QLabel(self.Sensors)
        self.tps_.setGeometry(QtCore.QRect(290, 120, 71, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.tps_.setFont(font)
        self.tps_.setAlignment(QtCore.Qt.AlignCenter)
        self.tps_.setObjectName("tps_")
        self.tps__ = QtWidgets.QLCDNumber(self.Sensors)
        self.tps__.setGeometry(QtCore.QRect(290, 150, 64, 23))
        self.tps__.setObjectName("tps__")
        self.speed_ = QtWidgets.QLabel(self.Sensors)
        self.speed_.setGeometry(QtCore.QRect(460, 120, 71, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.speed_.setFont(font)
        self.speed_.setAlignment(QtCore.Qt.AlignCenter)
        self.speed_.setObjectName("speed_")
        self.speed__ = QtWidgets.QLCDNumber(self.Sensors)
        self.speed__.setGeometry(QtCore.QRect(460, 150, 64, 23))
        self.speed__.setObjectName("speed__")
        self.speed = QtWidgets.QLabel(self.Sensors)
        self.speed.setGeometry(QtCore.QRect(460, 90, 71, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.speed.setFont(font)
        self.speed.setAlignment(QtCore.Qt.AlignCenter)
        self.speed.setObjectName("speed")
        self.tft__ = QtWidgets.QLCDNumber(self.Sensors)
        self.tft__.setGeometry(QtCore.QRect(100, 300, 64, 23))
        self.tft__.setObjectName("tft__")
        self.tft_ = QtWidgets.QLabel(self.Sensors)
        self.tft_.setGeometry(QtCore.QRect(100, 270, 71, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.tft_.setFont(font)
        self.tft_.setAlignment(QtCore.Qt.AlignCenter)
        self.tft_.setObjectName("tft_")
        self.tft = QtWidgets.QLabel(self.Sensors)
        self.tft.setGeometry(QtCore.QRect(90, 240, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.tft.setFont(font)
        self.tft.setAlignment(QtCore.Qt.AlignCenter)
        self.tft.setObjectName("tft")
        self.lp__ = QtWidgets.QLCDNumber(self.Sensors)
        self.lp__.setGeometry(QtCore.QRect(290, 300, 64, 23))
        self.lp__.setObjectName("lp__")
        self.lp = QtWidgets.QLabel(self.Sensors)
        self.lp.setGeometry(QtCore.QRect(270, 240, 101, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lp.setFont(font)
        self.lp.setAlignment(QtCore.Qt.AlignCenter)
        self.lp.setObjectName("lp")
        self.lp_ = QtWidgets.QLabel(self.Sensors)
        self.lp_.setGeometry(QtCore.QRect(290, 270, 71, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lp_.setFont(font)
        self.lp_.setAlignment(QtCore.Qt.AlignCenter)
        self.lp_.setObjectName("lp_")



        

        self.tabWidget.addTab(self.Sensors, "")
        ######   Gear box tab                   ##########################
        self.Gearbox = QtWidgets.QWidget()
        self.Gearbox.setObjectName("Gearbox")
        
        ##### PLOT               ##############
        self.widget = QtWidgets.QWidget(self.Gearbox)
        self.widget.setGeometry(QtCore.QRect(200, 10, 700, 450))
        self.widget.setObjectName("widget")
        self.figure = plt.figure()
  
        # this is the Canvas Widget that
        # displays the 'figure'it takes the
        # 'figure' instance as a parameter to __init__
        self.canvas = FigureCanvas(self.figure)
        
        # this is the Navigation widget
        # it takes the Canvas widget and a parent
        self.toolbar = NavigationToolbar(self.canvas, self.widget)
  
        # creating a Vertical Box layout
 # Just some button connected to 'plot' method
        self.button = QPushButton('Plot')
          
        # adding action to the button
        self.button.clicked.connect(self.plot)
        # refresh canvas
        self.plt = QVBoxLayout(self.widget)
        # self.plt.setGeometry(QtCore.QRect(200, 10, 600, 500))  
          
        # adding tool bar to the layout
        self.plt.addWidget(self.toolbar)
          
        # adding canvas to the layout
        self.plt.addWidget(self.canvas)
          
        # adding push button to the layout
        # self.plt.addWidget(self.button)
          
        ##### Gear Box List            ######################
        self.gear_list = QtWidgets.QListWidget(self.Gearbox)
        self.gear_list.setGeometry(QtCore.QRect(10, 10, 71, 361))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.gear_list.setFont(font)
        self.gear_list.setObjectName("gear_list")
        item = QtWidgets.QListWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(12)
        item.setFont(font)
        self.gear_list.addItem(item)
        item = QtWidgets.QListWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(12)
        item.setFont(font)
        self.gear_list.addItem(item)
        item = QtWidgets.QListWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(12)
        item.setFont(font)
        self.gear_list.addItem(item)
        item = QtWidgets.QListWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(12)
        item.setFont(font)
        self.gear_list.addItem(item)
        item = QtWidgets.QListWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(12)
        item.setFont(font)
        self.gear_list.addItem(item)
        item = QtWidgets.QListWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(12)
        item.setFont(font)
        self.gear_list.addItem(item)
        item = QtWidgets.QListWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(12)
        item.setFont(font)
        self.gear_list.addItem(item)
        item = QtWidgets.QListWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(12)
        item.setFont(font)
        self.gear_list.addItem(item)
        item = QtWidgets.QListWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(12)
        item.setFont(font)
        self.gear_list.addItem(item)
        item = QtWidgets.QListWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(12)
        item.setFont(font)
        self.gear_list.addItem(item)
        item = QtWidgets.QListWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(12)
        item.setFont(font)
        self.gear_list.addItem(item)
        item = QtWidgets.QListWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(12)
        item.setFont(font)
        self.gear_list.addItem(item)
        # self.gear_list.currentItemChanged.connect(self.index_changed)
        self.gear_list.currentTextChanged.connect(self.text_changed)
#########################################################################
        ###### Down Shift table ######################################################## 
        self.down_shift_table = QtWidgets.QTableWidget(self.Gearbox)
        self.down_shift_table.setGeometry(QtCore.QRect(550, 500, 311, 91))
        self.down_shift_table.setFrameShape(QtWidgets.QFrame.Box)
        self.down_shift_table.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.down_shift_table.setMidLineWidth(1)
        self.down_shift_table.setObjectName("down_shift_table")
        self.down_shift_table.setColumnCount(5)
        self.down_shift_table.setRowCount(2)
        item = QtWidgets.QTableWidgetItem()
        self.down_shift_table.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.down_shift_table.setVerticalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.down_shift_table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.down_shift_table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.down_shift_table.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.down_shift_table.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.down_shift_table.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.down_shift_table.setItem(0, 0, item)
        self.down_shift_table.horizontalHeader().setCascadingSectionResizes(False)
        self.down_shift_table.horizontalHeader().setDefaultSectionSize(50)
        self.down_shift_table.itemChanged.connect(lambda item: self.table_change(item,1))
        ###### Up Shift table ########################################################
        self.up_shift_table = QtWidgets.QTableWidget(self.Gearbox)
        self.up_shift_table.setGeometry(QtCore.QRect(190, 500, 311, 91))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.up_shift_table.sizePolicy().hasHeightForWidth())
        self.up_shift_table.setSizePolicy(sizePolicy)
        self.up_shift_table.setFrameShape(QtWidgets.QFrame.Box)
        self.up_shift_table.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.up_shift_table.setMidLineWidth(1)
        self.up_shift_table.setObjectName("up_shift_table")
        self.up_shift_table.setColumnCount(5)
        self.up_shift_table.setRowCount(2)
        item = QtWidgets.QTableWidgetItem()
        self.up_shift_table.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.up_shift_table.setVerticalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.up_shift_table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.up_shift_table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.up_shift_table.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.up_shift_table.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.up_shift_table.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.up_shift_table.setItem(0, 0, item)
        self.up_shift_table.horizontalHeader().setCascadingSectionResizes(False)
        self.up_shift_table.horizontalHeader().setDefaultSectionSize(50)
        self.up_shift_table.horizontalHeader().setMinimumSectionSize(30)
        
        self.up_shift_table.itemChanged.connect(lambda item: self.table_change(item,0))

        ###########################################################
        self.set = QtWidgets.QPushButton(self.Gearbox)
        self.set.setGeometry(QtCore.QRect(770, 610, 75, 23))
        self.set.setObjectName("set")
        self.reset = QtWidgets.QPushButton(self.Gearbox)
        self.reset.setGeometry(QtCore.QRect(690, 610, 75, 23))
        self.reset.setObjectName("reset")
        self.read = QtWidgets.QPushButton(self.Gearbox)
        self.read.setGeometry(QtCore.QRect(610, 610, 75, 23))
        self.read.setObjectName("read")
        self.label_3 = QtWidgets.QLabel(self.Gearbox)
        self.label_3.setGeometry(QtCore.QRect(320, 470, 47, 13))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.Gearbox)
        self.label_4.setGeometry(QtCore.QRect(660, 470, 51, 20))
        self.label_4.setObjectName("label_4")
        self.splitter = QtWidgets.QSplitter(self.Gearbox)
        self.splitter.setGeometry(QtCore.QRect(90, 10, 81, 311))
        self.splitter.setOrientation(QtCore.Qt.Vertical)
        self.splitter.setObjectName("splitter")
        ###################################################
        self.checkBox_1 = QtWidgets.QCheckBox(self.splitter)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.checkBox_1.sizePolicy().hasHeightForWidth())
        self.checkBox_1.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.checkBox_1.setFont(font)
        self.checkBox_1.setTristate(True)
        self.checkBox_1.setObjectName("checkBox_1")
        self.checkBox_1.stateChanged.connect(lambda: self.show_state(self.checkBox_1.checkState(),1))

        self.checkBox_2 = QtWidgets.QCheckBox(self.splitter)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.checkBox_2.sizePolicy().hasHeightForWidth())
        self.checkBox_2.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.checkBox_2.setFont(font)
        self.checkBox_2.setTristate(True)
        self.checkBox_2.setObjectName("checkBox_2")
        self.checkBox_2.stateChanged.connect(lambda: self.show_state(self.checkBox_2.checkState(),2))
        self.checkBox_3 = QtWidgets.QCheckBox(self.splitter)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.checkBox_3.sizePolicy().hasHeightForWidth())
        self.checkBox_3.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.checkBox_3.setFont(font)
        self.checkBox_3.setTristate(True)
        self.checkBox_3.setObjectName("checkBox_3")
        self.checkBox_3.stateChanged.connect(lambda: self.show_state(self.checkBox_3.checkState(),3))
        self.checkBox_4 = QtWidgets.QCheckBox(self.splitter)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.checkBox_4.sizePolicy().hasHeightForWidth())
        self.checkBox_4.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.checkBox_4.setFont(font)
        self.checkBox_4.setTristate(True)
        self.checkBox_4.setObjectName("checkBox_4")
        self.checkBox_4.stateChanged.connect(lambda: self.show_state(self.checkBox_4.checkState(),4))
        
        self.tabWidget.addTab(self.Gearbox, "")
        self.TCC = QtWidgets.QWidget()
        self.TCC.setObjectName("TCC")
        self.tabWidget.addTab(self.TCC, "")
        self.PCS = QtWidgets.QWidget()
        self.PCS.setObjectName("PCS")
        self.tabWidget.addTab(self.PCS, "")
        self.SL = QtWidgets.QWidget()
        self.SL.setObjectName("SL")
        self.tabWidget.addTab(self.SL, "")
        TCU.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(TCU)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 807, 21))
        self.menubar.setObjectName("menubar")
        TCU.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(TCU)
        self.statusbar.setObjectName("statusbar")
        TCU.setStatusBar(self.statusbar)

        self.retranslateUi(TCU)
        self.tabWidget.setCurrentIndex(1)
        QtCore.QMetaObject.connectSlotsByName(TCU)

    def retranslateUi(self, TCU):
        _translate = QtCore.QCoreApplication.translate
        TCU.setWindowTitle(_translate("TCU", "Transmission control unit"))
        self.eng_spd.setText(_translate("TCU", "Engine Speed"))
        self.eng_spd_.setText(_translate("TCU", "RPM"))
        self.tps.setText(_translate("TCU", "TPS"))
        self.tps_.setText(_translate("TCU", "%"))
        self.speed_.setText(_translate("TCU", "KM/H"))
        self.speed.setText(_translate("TCU", "Speed"))
        self.tft_.setText(_translate("TCU", "°C"))
        self.tft.setText(_translate("TCU", "Fluid Temp"))
        self.lp.setText(_translate("TCU", "Line Pressure"))
        self.lp_.setText(_translate("TCU", "%"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.Sensors), _translate("TCU", "Sensors"))
        self.set.setText(_translate("TCU", "Set"))
        __sortingEnabled = self.gear_list.isSortingEnabled()
        self.gear_list.setSortingEnabled(False)
        item = self.gear_list.item(0)
        item.setText(_translate("TCU", "Park"))
        item = self.gear_list.item(1)
        item.setText(_translate("TCU", "Reverse"))
        item = self.gear_list.item(2)
        item.setText(_translate("TCU", "Neutral"))
        item = self.gear_list.item(3)
        item.setText(_translate("TCU", "Gear 1"))
        item = self.gear_list.item(4)
        item.setText(_translate("TCU", "Gear 2"))
        item = self.gear_list.item(5)
        item.setText(_translate("TCU", "Gear 3"))
        item = self.gear_list.item(6)
        item.setText(_translate("TCU", "Gear 4"))
        item = self.gear_list.item(7)
        item.setText(_translate("TCU", "Gear 5"))
        item = self.gear_list.item(8)
        item.setText(_translate("TCU", "Gear 6"))
        item = self.gear_list.item(9)
        item.setText(_translate("TCU", "Gear 7"))
        item = self.gear_list.item(10)
        item.setText(_translate("TCU", "Gear 8"))
        item = self.gear_list.item(11)
        item.setText(_translate("TCU", "Gear 9"))
        self.gear_list.setSortingEnabled(__sortingEnabled)
        item = self.down_shift_table.verticalHeaderItem(0)
        item.setText(_translate("TCU", "Speed"))
        item = self.down_shift_table.verticalHeaderItem(1)
        item.setText(_translate("TCU", "Throttle"))
        item = self.down_shift_table.horizontalHeaderItem(0)
        item.setText(_translate("TCU", "1"))
        item = self.down_shift_table.horizontalHeaderItem(1)
        item.setText(_translate("TCU", "2"))
        item = self.down_shift_table.horizontalHeaderItem(2)
        item.setText(_translate("TCU", "3"))
        item = self.down_shift_table.horizontalHeaderItem(3)
        item.setText(_translate("TCU", "4"))
        item = self.down_shift_table.horizontalHeaderItem(4)
        item.setText(_translate("TCU", "5"))
        __sortingEnabled = self.down_shift_table.isSortingEnabled()
        self.down_shift_table.setSortingEnabled(False)
        self.down_shift_table.setSortingEnabled(__sortingEnabled)
        item = self.up_shift_table.verticalHeaderItem(0)
        item.setText(_translate("TCU", "Speed"))
        item = self.up_shift_table.verticalHeaderItem(1)
        item.setText(_translate("TCU", "Throttle"))
        item = self.up_shift_table.horizontalHeaderItem(0)
        item.setText(_translate("TCU", "1"))
        item = self.up_shift_table.horizontalHeaderItem(1)
        item.setText(_translate("TCU", "2"))
        item = self.up_shift_table.horizontalHeaderItem(2)
        item.setText(_translate("TCU", "3"))
        item = self.up_shift_table.horizontalHeaderItem(3)
        item.setText(_translate("TCU", "4"))
        item = self.up_shift_table.horizontalHeaderItem(4)
        item.setText(_translate("TCU", "5"))
        __sortingEnabled = self.up_shift_table.isSortingEnabled()
        self.up_shift_table.setSortingEnabled(False)
        self.up_shift_table.setSortingEnabled(__sortingEnabled)
        self.reset.setText(_translate("TCU", "Reset"))
        self.read.setText(_translate("TCU", "Read"))
        self.label_3.setText(_translate("TCU", "Up Shift"))
        self.label_4.setText(_translate("TCU", "Down Shift"))
        self.checkBox_1.setText(_translate("TCU", "Out 1"))
        self.checkBox_2.setText(_translate("TCU", "Out 2"))
        self.checkBox_3.setText(_translate("TCU", "Out 3"))
        self.checkBox_4.setText(_translate("TCU", "Out 4"))

        self.tabWidget.setTabText(self.tabWidget.indexOf(self.Gearbox), _translate("TCU", "Shift solenoids"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.TCC), _translate("TCU", "Torque converter clutch"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.PCS), _translate("TCU", "Pressure control solenoids"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.SL), _translate("TCU", "Shift Lock"))
    
    # def index_changed(self, i): # Not an index, i is a QListWidgetItem
    #     print(i.text())

    def text_changed(self, s): # s is a str
        global gear_list
        global G1 , G2 , G3 , G4 , G5 , G6 , G7 , G8 , G9
        global P , R , N
        global GP1 , GP2 , GP3 , GP4 , GP5 , GP6 , GP7 , GP8 , GP9

        global show
        gear_list=s
        show = 1 
        # print(s)
        print("show list:",show,gear_list)
        self.down_shift_table.clearContents()
        self.up_shift_table.clearContents()
        self.figure.clear()
        self.canvas.draw()
        if gear_list=="Park" :
            self.checkBox_1.setCheckState(P.O1)
            self.checkBox_2.setCheckState(P.O2)
            self.checkBox_3.setCheckState(P.O3)
            self.checkBox_4.setCheckState(P.O4)
        if gear_list=="Reverse" :
            self.checkBox_1.setCheckState(R.O1)
            self.checkBox_2.setCheckState(R.O2)
            self.checkBox_3.setCheckState(R.O3)
            self.checkBox_4.setCheckState(R.O4)
        if gear_list=="Neutral" :
            
            self.checkBox_1.setCheckState(N.O1)
            self.checkBox_2.setCheckState(N.O2)
            self.checkBox_3.setCheckState(N.O3)
            self.checkBox_4.setCheckState(N.O4)
        if gear_list=="Gear 1" :
            self.plot(GP1.data_x,GP1.data_y)
            for i in range (0,5):     
                item = QtWidgets.QTableWidgetItem(str(GP1.data_x[i]))
                self.up_shift_table.setItem(0,i,item)
                item = QtWidgets.QTableWidgetItem(str(GP1.data_x[i]))
                self.down_shift_table.setItem(0,i,item)
                item = QtWidgets.QTableWidgetItem(str(GP1.data_y[i][0]))
                self.up_shift_table.setItem(1,i,item)
                item = QtWidgets.QTableWidgetItem(str(GP1.data_y[i][1]))
                self.down_shift_table.setItem(1,i,item)
                print(i,str(GP1.data_x[i]),str(GP1.data_y[i][0]))
            self.checkBox_1.setCheckState(G1.O1)
            self.checkBox_2.setCheckState(G1.O2)
            self.checkBox_3.setCheckState(G1.O3)
            self.checkBox_4.setCheckState(G1.O4)
        if gear_list=="Gear 2" :
            self.plot(GP2.data_x,GP2.data_y)
            for i in range (0,5):  
                print(i,str(GP2.data_x[i]),str(GP2.data_y[i][0]))   
                item = QtWidgets.QTableWidgetItem(str(GP2.data_x[i]))
                self.up_shift_table.setItem(0,i,item)
                item = QtWidgets.QTableWidgetItem(str(GP2.data_x[i]))
                self.down_shift_table.setItem(0,i,item)
                item = QtWidgets.QTableWidgetItem(str(GP2.data_y[i][0]))
                self.up_shift_table.setItem(1,i,item)
                item = QtWidgets.QTableWidgetItem(str(GP2.data_y[i][1]))
                self.down_shift_table.setItem(1,i,item)
                
            self.checkBox_1.setCheckState(G2.O1)
            self.checkBox_2.setCheckState(G2.O2)
            self.checkBox_3.setCheckState(G2.O3)
            self.checkBox_4.setCheckState(G2.O4)
        if gear_list=="Gear 3" :
            self.plot(GP3.data_x,GP3.data_y)
            for i in range (0,5):     
                item = QtWidgets.QTableWidgetItem(str(GP3.data_x[i]))
                self.up_shift_table.setItem(0,i,item)
                item = QtWidgets.QTableWidgetItem(str(GP3.data_x[i]))
                self.down_shift_table.setItem(0,i,item)
                item = QtWidgets.QTableWidgetItem(str(GP3.data_y[i][0]))
                self.up_shift_table.setItem(1,i,item)
                item = QtWidgets.QTableWidgetItem(str(GP3.data_y[i][1]))
                self.down_shift_table.setItem(1,i,item)
                print(i,str(GP3.data_x[i]),str(GP3.data_y[i][0]))
            self.checkBox_1.setCheckState(G3.O1)
            self.checkBox_2.setCheckState(G3.O2)
            self.checkBox_3.setCheckState(G3.O3)
            self.checkBox_4.setCheckState(G3.O4)
        if gear_list=="Gear 4" :
            self.plot(GP4.data_x,GP4.data_y)
            for i in range (0,5):     
                item = QtWidgets.QTableWidgetItem(str(GP4.data_x[i]))
                self.up_shift_table.setItem(0,i,item)
                item = QtWidgets.QTableWidgetItem(str(GP4.data_x[i]))
                self.down_shift_table.setItem(0,i,item)
                item = QtWidgets.QTableWidgetItem(str(GP4.data_y[i][0]))
                self.up_shift_table.setItem(1,i,item)
                item = QtWidgets.QTableWidgetItem(str(GP4.data_y[i][1]))
                self.down_shift_table.setItem(1,i,item)
            self.checkBox_1.setCheckState(G4.O1)
            self.checkBox_2.setCheckState(G4.O2)
            self.checkBox_3.setCheckState(G4.O3)
            self.checkBox_4.setCheckState(G4.O4)
        if gear_list=="Gear 5" :
            self.plot(GP5.data_x,GP5.data_y)
            for i in range (0,5):     
                item = QtWidgets.QTableWidgetItem(str(GP5.data_x[i]))
                self.up_shift_table.setItem(0,i,item)
                item = QtWidgets.QTableWidgetItem(str(GP5.data_x[i]))
                self.down_shift_table.setItem(0,i,item)
                item = QtWidgets.QTableWidgetItem(str(GP5.data_y[i][0]))
                self.up_shift_table.setItem(1,i,item)
                item = QtWidgets.QTableWidgetItem(str(GP5.data_y[i][1]))
                self.down_shift_table.setItem(1,i,item)
            self.checkBox_1.setCheckState(G5.O1)
            self.checkBox_2.setCheckState(G5.O2)
            self.checkBox_3.setCheckState(G5.O3)
            self.checkBox_4.setCheckState(G5.O4)
        if gear_list=="Gear 6" :
            self.plot(GP6.data_x,GP6.data_y)
            for i in range (0,5):     
                item = QtWidgets.QTableWidgetItem(str(GP6.data_x[i]))
                self.up_shift_table.setItem(0,i,item)
                item = QtWidgets.QTableWidgetItem(str(GP6.data_x[i]))
                self.down_shift_table.setItem(0,i,item)
                item = QtWidgets.QTableWidgetItem(str(GP6.data_y[i][0]))
                self.up_shift_table.setItem(1,i,item)
                item = QtWidgets.QTableWidgetItem(str(GP6.data_y[i][1]))
                self.down_shift_table.setItem(1,i,item)
            self.checkBox_1.setCheckState(G6.O1)
            self.checkBox_2.setCheckState(G6.O2)
            self.checkBox_3.setCheckState(G6.O3)
            self.checkBox_4.setCheckState(G6.O4)
        if gear_list=="Gear 7" :
            self.plot(GP7.data_x,GP7.data_y)
            for i in range (0,5):     
                item = QtWidgets.QTableWidgetItem(str(GP7.data_x[i]))
                self.up_shift_table.setItem(0,i,item)
                item = QtWidgets.QTableWidgetItem(str(GP7.data_x[i]))
                self.down_shift_table.setItem(0,i,item)
                item = QtWidgets.QTableWidgetItem(str(GP7.data_y[i][0]))
                self.up_shift_table.setItem(1,i,item)
                item = QtWidgets.QTableWidgetItem(str(GP7.data_y[i][1]))
                self.down_shift_table.setItem(1,i,item)
            self.checkBox_1.setCheckState(G7.O1)
            self.checkBox_2.setCheckState(G7.O2)
            self.checkBox_3.setCheckState(G7.O3)
            self.checkBox_4.setCheckState(G7.O4)
        if gear_list=="Gear 8" :
            self.plot(GP8.data_x,GP8.data_y)
            for i in range (0,5):     
                item = QtWidgets.QTableWidgetItem(str(GP8.data_x[i]))
                self.up_shift_table.setItem(0,i,item)
                item = QtWidgets.QTableWidgetItem(str(GP8.data_x[i]))
                self.down_shift_table.setItem(0,i,item)
                item = QtWidgets.QTableWidgetItem(str(GP8.data_y[i][0]))
                self.up_shift_table.setItem(1,i,item)
                item = QtWidgets.QTableWidgetItem(str(GP8.data_y[i][1]))
                self.down_shift_table.setItem(1,i,item)
            self.checkBox_1.setCheckState(G8.O1)
            self.checkBox_2.setCheckState(G8.O2)
            self.checkBox_3.setCheckState(G8.O3)
            self.checkBox_4.setCheckState(G8.O4)
        if gear_list=="Gear 9" :
            self.plot(GP9.data_x,GP9.data_y)
            for i in range (0,5):     
                item = QtWidgets.QTableWidgetItem(str(GP9.data_x[i]))
                self.up_shift_table.setItem(0,i,item)
                item = QtWidgets.QTableWidgetItem(str(GP9.data_x[i]))
                self.down_shift_table.setItem(0,i,item)
                item = QtWidgets.QTableWidgetItem(str(GP9.data_y[i][0]))
                self.up_shift_table.setItem(1,i,item)
                item = QtWidgets.QTableWidgetItem(str(GP9.data_y[i][1]))
                self.down_shift_table.setItem(1,i,item)
            self.checkBox_1.setCheckState(G9.O1)
            self.checkBox_2.setCheckState(G9.O2)
            self.checkBox_3.setCheckState(G9.O3)
            self.checkBox_4.setCheckState(G9.O4)
        show = 0
        
    #### check box state change #############################
    def show_state(self,sig,num):
        global gear_list
        global G1 , G2 , G3 , G4 , G5 , G6 , G7 , G8 , G9
        global P , R , N
        if gear_list=="Park" :
            
            if num == 1 :
                P.O1=sig
            if num == 2 :
                P.O2=sig
            if num == 3 :
                P.O3=sig
            if num == 4 :
                P.O4=sig
            print(P)
        if gear_list=="Reverse" :
            
            if num == 1 :
                R.O1=sig
            if num == 2 :
                R.O2=sig
            if num == 3 :
                R.O3=sig
            if num == 4 :
                R.O4=sig
            print(R)
        if gear_list=="Neutral" :
            
            if num == 1 :
                N.O1=sig
            if num == 2 :
                N.O2=sig
            if num == 3 :
                N.O3=sig
            if num == 4 :
                N.O4=sig
            print(N)
        if gear_list=="Gear 1" :
            
            if num == 1 :
                G1.O1=sig
            if num == 2 :
                G1.O2=sig
            if num == 3 :
                G1.O3=sig
            if num == 4 :
                G1.O4=sig
        if gear_list=="Gear 2" :
            
            if num == 1 :
                G2.O1=sig
            if num == 2 :
                G2.O2=sig
            if num == 3 :
                G2.O3=sig
            if num == 4 :
                G2.O4=sig
        if gear_list=="Gear 3" :
            
            if num == 1 :
                G3.O1=sig
            if num == 2 :
                G3.O2=sig
            if num == 3 :
                G3.O3=sig
            if num == 4 :
                G3.O4=sig
        if gear_list=="Gear 4" :
            
            if num == 1 :
                G4.O1=sig
            if num == 2 :
                G4.O2=sig
            if num == 3 :
                G4.O3=sig
            if num == 4 :
                G4.O4=sig
        if gear_list=="Gear 5" :
            if num == 1 :
                G5.O1=sig
            if num == 2 :
                G5.O2=sig
            if num == 3 :
                G5.O3=sig
            if num == 4 :
                G5.O4=sig
        if gear_list=="Gear 6" :
            
            if num == 1 :
                G6.O1=sig
            if num == 2 :
                G6.O2=sig
            if num == 3 :
                G6.O3=sig
            if num == 4 :
                G6.O4=sig
        if gear_list=="Gear 7" :
            
            if num == 1 :
                G7.O1=sig
            if num == 2 :
                G7.O2=sig
            if num == 3 :
                G7.O3=sig
            if num == 4 :
                G7.O4=sig
        if gear_list=="Gear 8" :
            
            if num == 1 :
                G8.O1=sig
            if num == 2 :
                G8.O2=sig
            if num == 3 :
                G8.O3=sig
            if num == 4 :
                G8.O4=sig
        if gear_list=="Gear 9" :
            
            if num == 1 :
                G9.O1=sig
            if num == 2 :
                G9.O2=sig
            if num == 3 :
                G9.O3=sig
            if num == 4 :
                G9.O4=sig
            

        # print(P)
        
        print(gear_list)
        # print(s)

    def plot(self,data_x ,data_y):
        
        # random data
        # data_x = [20,40,60,80,100 ]
        # data_y = [0,1000,2000,3000,4000]
        # tsstdata = [[1,2],[2,3],[5,6]]
        # clearing old figure
        self.figure.clear()

        # create an axis
        ax = self.figure.add_subplot(111)

        # plot data
        ax.plot(data_x,data_y, '*-')

        # refresh canvas
        self.canvas.draw()

    def table_change(self, item,tbl):
        global gear_list , show
        global GP1,GP2,GP3,GP4,GP5,GP6,GP7,GP8,GP9
        row = item.row()
        col = item.column()
        data = int(item.text())
        if show == 0:
            print("table change data row col table list",data,row,col,tbl,gear_list)
            if gear_list == "Gear 1":
                if row == 0 :
                    GP1.data_x[col]=data
                if row == 1:
                    GP1.data_y[col][tbl]=data
                self.plot(GP1.data_x,GP1.data_y)
                print(11111111)
            if gear_list == "Gear 2":
                if row == 0 :
                    GP2.data_x[col]=data
                if row == 1:
                    GP2.data_y[col][tbl]=data
                self.plot(GP2.data_x,GP2.data_y)
                print(2222222222)
            if gear_list == "Gear 3":
                if row == 0 :
                    GP3.data_x[col]=data
                if row == 1:
                    GP3.data_y[col][tbl]=int(data)
                self.plot(GP3.data_x,GP3.data_y)
            if gear_list == "Gear 4":
                if row == 0 :
                    GP4.data_x[col]=data
                if row == 1:
                    GP4.data_y[col][tbl]=data
                self.plot(GP4.data_x,GP4.data_y)
            if gear_list == "Gear 5":
                if row == 0 :
                    GP5.data_x[col]=data
                if row == 1:
                    GP5.data_y[col][tbl]=data
                self.plot(GP5.data_x,GP5.data_y)
            if gear_list == "Gear 6":
                if row == 0 :
                    GP6.data_x[col]=data
                if row == 1:
                    GP6.data_y[col][tbl]=data
                self.plot(GP6.data_x,GP6.data_y)
            if gear_list == "Gear 7":
                if row == 0 :
                    GP7.data_x[col]=data
                if row == 1:
                    GP7.data_y[col][tbl]=data
                self.plot(GP7.data_x,GP7.data_y)
            if gear_list == "Gear 8":
                if row == 0 :
                    GP8.data_x[col]=data
                if row == 1:
                    GP8.data_y[col][tbl]=data
                self.plot(GP8.data_x,GP8.data_y)
            if gear_list == "Gear 9":
                if row == 0 :
                    GP9.data_x[col]=int(data)
                if row == 1:
                    GP9.data_y[col][tbl]=int(data)
                self.plot(GP9.data_x,GP9.data_y)
        
        
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    TCU = QtWidgets.QMainWindow()
    ui = Ui_TCU()
    ui.setupUi(TCU)
    TCU.show()
    sys.exit(app.exec_())
